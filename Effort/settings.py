"""
Django settings for Effort project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import pathlib
from pathlib import Path
import os
import logging
from . import allauth_settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('EFFORT_SECRET_KEY', 'please-set-a-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = {'False': False, 'True': True}[os.environ.get('EFFORT_DEBUG')]
LOG_LEVEL = logging.DEBUG

if SECRET_KEY == 'please-set-a-secret-key':
    if DEBUG:
        print('WARNING: No secret key set.')
    else:
        del SECRET_KEY  # Unset the secret key if it is set to the development default while in production

ALLOWED_HOSTS = os.environ.get('EFFORT_ALLOWED_HOSTS', 'localhost').split(',')
CSRF_TRUSTED_ORIGINS = ['https://'+host for host in ALLOWED_HOSTS]

# Application definition

INSTALLED_APPS = [
    'core',
    'lists',
    'notes',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'markdownx',
    # for allauth
    'django.contrib.sites',
    'django_bootstrap5',
    'allauth_ui',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django_feather',
    'recurrence',
    'django_q',
    'herald',
    'anymail',
] + allauth_settings.INSTALLED_APPS

SOCIALACCOUNT_PROVIDERS = {} | allauth_settings.SOCIALACCOUNT_PROVIDERS

ALLAUTH_UI = dict(
   LOGIN_URL="/accounts/login/",
   LOGIN_REDIRECT_URL="/",
   LOGOUT_REDIRECT_URL="/",
   SITE_TITLE='Effort',
   SITE_HEADER='Effort',
)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'Effort.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Effort.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

if os.environ.get('EFFORT_DATABASE_ENGINE', 'sqlite3') == 'sqlite3':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.environ.get('EFFORT_SQLITE3_PATH', 'db.sqlite3'),
        }
    }
elif os.environ.get('EFFORT_DATABASE_ENGINE') == 'postgres':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'OPTIONS': {
                'service': os.environ.get('EFFORT_POSTGRES_SERVICE'),
                'passfile': os.environ.get('EFFORT_POSTGRES_PASSFILE'),
            },
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True
RECURRENCE_USE_TZ=True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# for allauth
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1

STATIC_ROOT = pathlib.Path(os.environ.get('EFFORT_STATIC_ROOT', './static'))

Q_CLUSTER = {
    "name": "effort",
    "orm": "default",  # Use Django's ORM + database for broker
    "retry": 10,
    "timeout": 5,
}

ANYMAIL = {
    "MAILGUN_API_KEY": os.environ.get('EFFORT_MAILGUN_API_KEY', None),
    "MAILGUN_SENDER_DOMIAIN": os.environ.get('EFFORT_MAILGUN_SENDER_DOMIAIN', None),
}

EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"
DEFAULT_FROM_EMAIL = os.environ.get('EFFORT_DEFAULT_FROM_EMAIL', 'dev@stupid.frickin.website')
SERVER_EMAIL = os.environ.get('EFFORT_SERVER_EMAIL', 'dev-server@stupid.frickin.website')
